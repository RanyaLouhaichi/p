<!DOCTYPE html>
<html>
<head>
    <title>JURIX AI Dashboard - $projectName</title>
    <meta charset="utf-8">
    <meta name="decorator" content="atl.general">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.js"></script>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
            background-color: #f7f8fa;
            color: #172b4d;
            font-size: 14px;
            line-height: 1.5;
        }

        .container {
            max-width: 1600px;
            margin: 0 auto;
            padding: 20px 24px;
        }

        /* Header */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 28px;
            background-color: white;
            padding: 20px 28px;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.06);
        }

        .header h1 {
            font-size: 24px;
            font-weight: 600;
            color: #172b4d;
        }

        .add-ticket-btn {
            background-color: #0052CC;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s;
        }

        .add-ticket-btn:hover {
            background-color: #0747A6;
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,82,204,0.2);
        }

        /* Sidebar */
        .sidebar {
            position: fixed;
            left: 0;
            top: 40px;
            width: 56px;
            height: calc(100vh - 40px);
            background-color: white;
            box-shadow: 1px 0 3px rgba(0,0,0,0.06);
            display: flex;
            flex-direction: column;
            align-items: center;
            padding-top: 20px;
            gap: 8px;
        }

        .sidebar-icon {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            border-radius: 8px;
            transition: all 0.2s;
            color: #5e6c84;
        }

        .sidebar-icon:hover {
            background-color: #f4f5f7;
            color: #0052CC;
        }

        .sidebar-icon.active {
            background-color: #0052CC;
            color: white;
        }

        /* Main Content */
        .main-content {
            margin-left: 72px;
        }

        /* Stats Grid - now 5 columns including alert */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 16px;
            margin-bottom: 28px;
        }

        .stat-card {
            background-color: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.06);
            transition: all 0.2s;
            position: relative;
            border: 1px solid transparent;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.08);
        }

        .stat-value {
            font-size: 32px;
            font-weight: 600;
            margin-bottom: 4px;
            color: #172b4d;
        }

        .stat-label {
            font-size: 13px;
            color: #5e6c84;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .stat-change {
            font-size: 13px;
            display: flex;
            align-items: center;
            gap: 4px;
            font-weight: 500;
        }

        .stat-change.positive {
            color: #00875a;
        }

        .stat-change.negative {
            color: #de350b;
        }

        .view-details-btn {
            position: absolute;
            bottom: 16px;
            right: 16px;
            font-size: 12px;
            color: #8993a4;
            background: transparent;
            border: none;
            padding: 4px 8px;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .view-details-btn:hover {
            background: #f4f5f7;
            color: #5e6c84;
        }

        /* Alert Card - Same style as other cards but with alert features */
        .alert-card {
            background-color: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.06);
            transition: all 0.2s;
            position: relative;
            border: 1px solid transparent;
            cursor: pointer;
            overflow: hidden;
        }

        .alert-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.08);
        }

        /* Subtle alert indicator */
        .alert-indicator {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: #de350b;
            animation: alertPulse 2s ease-in-out infinite;
        }

        @keyframes alertPulse {
            0%, 100% { opacity: 0.8; }
            50% { opacity: 1; }
        }

        .alert-dot {
            position: absolute;
            top: 16px;
            right: 16px;
            width: 8px;
            height: 8px;
            background-color: #de350b;
            border-radius: 50%;
            animation: pulse 2s ease-in-out infinite;
        }

        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(222,53,11,0.7); }
            70% { box-shadow: 0 0 0 8px rgba(222,53,11,0); }
            100% { box-shadow: 0 0 0 0 rgba(222,53,11,0); }
        }

        .alert-value {
            font-size: 32px;
            font-weight: 600;
            margin-bottom: 4px;
            color: #de350b;
        }

        .alert-label {
            font-size: 13px;
            color: #5e6c84;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .alert-details {
            font-size: 13px;
            color: #de350b;
            font-weight: 600;
        }

        /* Remove old banner styles */
        .alert-banner {
            display: none;
        }

        /* Charts Section */
        .charts-grid {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 16px;
            margin-bottom: 28px;
        }

        .chart-card {
            background-color: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.06);
        }

        .chart-title {
            font-size: 15px;
            font-weight: 600;
            margin-bottom: 4px;
            color: #172b4d;
        }

        .chart-subtitle {
            font-size: 12px;
            color: #5e6c84;
            margin-bottom: 16px;
        }

        .chart-container {
            height: 200px;
            position: relative;
        }

        /* Sprint Progress */
        .progress-legend {
            display: flex;
            gap: 20px;
            margin-bottom: 16px;
            font-size: 12px;
        }

        .progress-legend-item {
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .progress-legend-box {
            width: 12px;
            height: 12px;
            border-radius: 2px;
        }

        .sprint-progress-container {
            height: 180px;
            display: flex;
            align-items: flex-end;
            justify-content: space-around;
            padding: 0 10px;
        }

        .week-bar {
            width: 60px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .stacked-bar {
            width: 100%;
            height: 160px;
            display: flex;
            flex-direction: column-reverse;
            border-radius: 4px 4px 0 0;
            overflow: hidden;
            margin-bottom: 8px;
            background: #f4f5f7;
            position: relative;
        }

        .bar-segment {
            width: 100%;
            transition: all 0.3s;
            position: relative;
        }

        .bar-segment.completed {
            background-color: #0052CC;
        }

        .bar-segment.in-progress {
            background-color: #6B88F7;
        }

        .bar-segment.todo {
            background-color: #DFE5FF;
        }

        .week-label {
            font-size: 12px;
            color: #5e6c84;
        }

        /* Burndown Chart */
        .burndown-chart {
            width: 100%;
            height: 100%;
        }

        /* Velocity Chart */
        .velocity-chart {
            width: 100%;
            height: 100%;
        }

        /* AI INSIGHTS SECTION */
        .ai-insights-wrapper {
            background-color: white;
            border-radius: 16px;
            padding: 28px 32px;
            margin-top: 28px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.04);
            position: relative;
            overflow: hidden;
            border: 1px solid #e4e6ea;
        }

        

        .ai-header {
            margin-bottom: 28px;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .ai-title {
            font-size: 22px;
            font-weight: 600;
            color: #172b4d;
            margin-bottom: 0;
            letter-spacing: -0.3px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        /* AI indicator - subtle and professional */
        .ai-indicator {
            display: inline-flex;
            align-items: center;
            gap: 4px;
            padding: 5px 12px;
            background: #f4f5f7;
            border-radius: 20px;
            font-size: 11px;
            font-weight: 500;
            color: #5e6c84;
            letter-spacing: 0.5px;
        }

        .ai-indicator::before {
            content: '';
            width: 5px;
            height: 5px;
            background: #5e6c84;
            border-radius: 50%;
            animation: ai-pulse 3s ease-in-out infinite;
        }

        @keyframes ai-pulse {
            0%, 100% { opacity: 0.3; transform: scale(1); }
            50% { opacity: 1; transform: scale(1.2); }
        }

        /* Top Action Buttons */
        .ai-top-actions {
            position: absolute;
            top: 28px;
            right: 32px;
            display: flex;
            gap: 12px;
        }

        .ai-action-btn {
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 13px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            border: none;
        }

        .ai-action-btn.primary {
            background-color: #0052CC;
            color: white;
        }

        .ai-action-btn.primary:hover {
            background-color: #0747A6;
            transform: translateY(-1px);
            box-shadow: 0 2px 6px rgba(0,82,204,0.15);
        }

        .ai-action-btn.secondary {
            background-color: white;
            color: #42526e;
            border: 1px solid #dfe1e6;
        }

        .ai-action-btn.secondary:hover {
            background-color: #f4f5f7;
            border-color: #c1c7d0;
        }

        /* Main Grid Layout */
        .ai-content-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 28px;
        }

        /* Left Column */
        .ai-left-section {
            display: flex;
            flex-direction: column;
            gap: 24px;
        }

        /* Risk Assessment Card */
        .risk-card {
            background-color: #f7f8fa;
            border-radius: 12px;
            padding: 20px;
            position: relative;
            border: 1px solid #e4e6ea;
        }

        .risk-header {
            margin-bottom: 18px;
        }

        .risk-title {
            font-size: 16px;
            font-weight: 600;
            color: #172b4d;
            margin-bottom: 8px;
        }

        .risk-value {
            font-size: 36px;
            font-weight: 700;
            color: #172b4d;
            margin-bottom: 4px;
        }

        .risk-label {
            font-size: 13px;
            color: #6b778c;
        }

        /* Bar Chart */
        .bar-chart {
            height: 80px;
            display: flex;
            align-items: flex-end;
            justify-content: space-between;
            gap: 4px;
            margin-top: 16px;
        }

        .bar {
            flex: 1;
            background: #e4e6ea;
            border-radius: 2px 2px 0 0;
            position: relative;
            transition: all 0.3s;
        }

        .bar.active {
            background: #0052CC;
        }

        .bar:hover {
            background: #c1c7d0;
        }

        .bar.active:hover {
            background: #0747A6;
        }

        .bar-label {
            position: absolute;
            bottom: -16px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 10px;
            color: #8993a4;
        }

        /* Project Predictions */
        .market-card {
            background-color: white;
            border-radius: 12px;
            padding: 20px;
            border: 1px solid #f0f2f5;
        }

        .prediction-item {
            padding: 16px 0;
            border-bottom: 1px solid #f0f2f5;
        }

        .prediction-item:last-child {
            border-bottom: none;
            padding-bottom: 0;
        }

        .prediction-item:first-child {
            padding-top: 0;
        }

        .prediction-header {
            display: flex;
            align-items: flex-start;
            gap: 12px;
            margin-bottom: 8px;
        }

        .prediction-icon {
            width: 32px;
            height: 32px;
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
            margin-top: 2px;
        }

        .prediction-icon.growth {
            background-color: rgba(0,82,204,0.1);
            color: #0052CC;
        }

        .prediction-icon.warning {
            background-color: rgba(255,171,0,0.1);
            color: #ffab00;
        }

        .prediction-icon svg {
            width: 16px;
            height: 16px;
        }

        .prediction-title {
            font-size: 15px;
            font-weight: 600;
            color: #172b4d;
            margin-bottom: 4px;
        }

        .prediction-description {
            font-size: 13px;
            color: #6b778c;
            line-height: 1.5;
            margin-bottom: 6px;
        }

        .prediction-metric {
            font-size: 13px;
            color: #0052CC;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        /* Right Column */
        .ai-right-section {
            display: flex;
            flex-direction: column;
            gap: 24px;
        }

        /* Performance Forecasts */
        .performance-card {
            background-color: #f7f8fa;
            border-radius: 12px;
            padding: 20px;
            border: 1px solid #e4e6ea;
        }

        .performance-subtitle {
            font-size: 13px;
            color: #6b778c;
            margin-top: 6px;
            margin-bottom: 20px;
            line-height: 1.5;
        }

        /* Creative Pills Design */
        .forecast-pills {
            display: flex;
            gap: 8px;
            margin-bottom: 20px;
            position: relative;
        }

        .forecast-pill {
            flex: 1;
            padding: 12px 16px;
            text-align: center;
            font-size: 13px;
            font-weight: 500;
            color: #6b778c;
            cursor: pointer;
            transition: all 0.3s;
            position: relative;
            background: transparent;
            border: none;
        }

        .forecast-pill::before {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: #e4e6ea;
            transition: all 0.3s;
        }

        .forecast-pill:hover {
            color: #42526e;
        }

        .forecast-pill:hover::before {
            background: #c1c7d0;
        }

        .forecast-pill.active {
            color: #0052CC;
            font-weight: 600;
        }

        .forecast-pill.active::before {
            height: 3px;
            background: #0052CC;
        }

        /* Floating indicator dot */
        .forecast-indicator {
            position: absolute;
            top: -8px;
            width: 6px;
            height: 6px;
            background: #0052CC;
            border-radius: 50%;
            transition: left 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 2px 4px rgba(0,82,204,0.3);
        }

        .forecast-indicator.pos-1 {
            left: calc(16.67% - 3px);
        }

        .forecast-indicator.pos-2 {
            left: calc(50% - 3px);
        }

        .forecast-indicator.pos-3 {
            left: calc(83.33% - 3px);
        }

        /* AI Recommendations Grid */
        .recommendations-section {
            margin-top: 0;
        }

        .recommendations-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 12px;
            margin-top: 16px;
        }

        .recommendation-card {
            background-color: white;
            border-radius: 10px;
            padding: 16px;
            cursor: pointer;
            transition: all 0.2s;
            border: 1px solid #f0f2f5;
        }

        .recommendation-card:hover {
            border-color: #dfe1e6;
            transform: translateY(-1px);
            box-shadow: 0 2px 6px rgba(0,0,0,0.04);
        }

        .rec-icon {
            width: 36px;
            height: 36px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 12px;
        }

        .rec-icon svg {
            width: 18px;
            height: 18px;
        }

        .rec-icon.portfolio {
            background-color: rgba(0,82,204,0.1);
            color: #0052CC;
        }

        .rec-icon.compliance {
            background-color: rgba(0,135,90,0.1);
            color: #00875a;
        }

        .rec-icon.service {
            background-color: rgba(255,171,0,0.1);
            color: #ffab00;
        }

        .rec-icon.risk {
            background-color: rgba(101,84,192,0.1);
            color: #6554C0;
        }

        .rec-title {
            font-size: 14px;
            font-weight: 600;
            color: #172b4d;
            margin-bottom: 4px;
        }

        .rec-description {
            font-size: 13px;
            color: #6b778c;
            line-height: 1.4;
            margin-bottom: 12px;
        }

        .apply-btn {
            width: 100%;
            padding: 8px 14px;
            background-color: white;
            color: #0052CC;
            border: 1.5px solid #0052CC;
            border-radius: 6px;
            font-size: 13px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            position: relative;
            overflow: hidden;
        }

        .apply-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: #0052CC;
            transition: left 0.3s ease;
            z-index: 0;
        }

        .apply-btn span {
            position: relative;
            z-index: 1;
        }

        .apply-btn:hover {
            color: white;
            transform: translateY(-1px);
            box-shadow: 0 2px 6px rgba(0,82,204,0.15);
        }

        .apply-btn:hover::before {
            left: 0;
        }

        .forecast-start-btn {
            margin-top: 0;
            width: auto;
            padding: 8px 16px;
            background-color: #0052CC;
            color: white;
            border: none;
        }

        .forecast-start-btn:hover {
            background-color: #0747A6 !important;
            color: white !important;
        }

        /* Make sure the text stays visible */
        .forecast-start-btn span {
            position: relative;
            z-index: 1;
            color: white !important;
        }

        .forecast-start-btn:hover span {
            color: white !important;
        }

        /* Modal */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            backdrop-filter: blur(2px);
            z-index: 999;
            opacity: 0;
            transition: opacity 0.3s;
            pointer-events: none;
        }

        .modal-overlay.active {
            opacity: 1;
            pointer-events: all;
        }

        .alert-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.9);
            background: white;
            border-radius: 16px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
            padding: 28px;
            width: 520px;
            max-width: 90vw;
            z-index: 1000;
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .alert-modal.active {
            transform: translate(-50%, -50%) scale(1);
            opacity: 1;
        }

        .modal-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 24px;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: #172b4d;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .close-btn {
            width: 32px;
            height: 32px;
            border: none;
            background: #f4f5f7;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }

        .close-btn:hover {
            background: #ebecf0;
        }

        .alert-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .alert-item {
            padding: 16px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border: 1px solid #ffebe6;
            background: #fffbfa;
            transition: all 0.2s;
        }

        .alert-item:hover {
            background: #ffebe6;
            transform: translateX(4px);
        }

        .alert-item-left {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .alert-severity {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #ff5630;
            animation: pulse-dot 2s infinite;
        }

        @keyframes pulse-dot {
            0% { box-shadow: 0 0 0 0 rgba(255,86,48,0.7); }
            70% { box-shadow: 0 0 0 8px rgba(255,86,48,0); }
            100% { box-shadow: 0 0 0 0 rgba(255,86,48,0); }
        }

        .alert-text {
            font-size: 14px;
            color: #172b4d;
            font-weight: 500;
        }

        .alert-time {
            font-size: 12px;
            color: #5e6c84;
        }

        /* Tooltip */
        .tooltip {
            position: absolute;
            background: #172b4d;
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.2s;
            z-index: 1000;
            white-space: nowrap;
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        }

        .tooltip.show {
            opacity: 0.95;
        }

        .tooltip::after {
            content: '';
            position: absolute;
            bottom: -4px;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 0;
            border-left: 4px solid transparent;
            border-right: 4px solid transparent;
            border-top: 4px solid #172b4d;
        }

        /* Responsive */
        @media (max-width: 1400px) {
            .stats-grid {
                grid-template-columns: repeat(3, 1fr);
            }
            
            .ai-content-grid {
                grid-template-columns: 1fr;
                gap: 24px;
            }
        }

        @media (max-width: 1200px) {
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .charts-grid {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .main-content {
                margin-left: 0;
            }
            
            .sidebar {
                display: none;
            }
            
            .recommendations-grid {
                grid-template-columns: 1fr;
            }
        }
        
        /* Add these styles for forecast results and other missing elements */
        
        /* Risk levels */
        .risk-card.low-risk .risk-value { color: #36B37E; }
        .risk-card.medium-risk .risk-value { color: #FFAB00; }
        .risk-card.high-risk .risk-value { color: #FF5630; }
        .risk-card.critical-risk .risk-value { color: #DE350B; }
        
        /* Forecast Results */
        .forecast-results {
            background: #f7f8fa;
            border-radius: 8px;
            padding: 16px;
            margin-top: 16px;
        }
        
        .forecast-result-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }
        
        .forecast-result-header h4 {
            margin: 0;
            font-size: 16px;
            color: #172b4d;
        }
        
        .forecast-confidence {
            font-size: 12px;
            color: #5e6c84;
            background: white;
            padding: 4px 8px;
            border-radius: 12px;
        }
        
        .forecast-trend {
            margin-bottom: 8px;
            font-size: 14px;
        }
        
        .forecast-trend.increasing { color: #36B37E; }
        .forecast-trend.declining { color: #FF5630; }
        .forecast-trend.stable { color: #6B778C; }
        
        .forecast-values {
            display: flex;
            gap: 8px;
            align-items: center;
            margin: 12px 0;
        }
        
        .forecast-value {
            background: white;
            padding: 6px 12px;
            border-radius: 6px;
            font-weight: 600;
            color: #0052CC;
        }
        
        .forecast-insight {
            font-size: 13px;
            color: #6b778c;
            margin: 8px 0;
            padding: 12px;
            background: white;
            border-radius: 6px;
            border-left: 3px solid #0052CC;
        }
        
        .forecast-recommendation {
            font-size: 13px;
            color: #172b4d;
            margin-top: 12px;
            font-weight: 500;
        }
        
        .forecast-loading {
            text-align: center;
            padding: 20px;
            color: #5e6c84;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 12px;
        }
        
        .loading-spinner {
            width: 24px;
            height: 24px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #0052CC;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            display: inline-block;
            margin-right: 8px;
            vertical-align: middle;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Additional forecast styles */
        .forecast-visual {
            margin: 16px 0;
        }
        
        .forecast-metrics {
            display: flex;
            flex-direction: column;
            gap: 8px;
            margin: 16px 0;
        }
        
        .metric-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #e4e6ea;
        }
        
        .metric-row:last-child {
            border-bottom: none;
        }
        
        .metric-label {
            font-size: 13px;
            color: #6b778c;
        }
        
        .metric-value {
            font-size: 14px;
            font-weight: 600;
            color: #172b4d;
        }
        
        .forecast-insight-card {
            background: white;
            border: 1px solid #dfe1e6;
            border-radius: 8px;
            padding: 16px;
            margin-top: 16px;
            display: flex;
            gap: 12px;
            align-items: flex-start;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }
        
        .forecast-insight-icon {
            width: 32px;
            height: 32px;
            background: #f4f5f7;
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }
        
        .forecast-insight-icon svg {
            width: 18px;
            height: 18px;
            fill: #5e6c84;
        }
        
        .forecast-insight-content {
            flex: 1;
        }
        
        .forecast-insight-title {
            font-weight: 600;
            color: #172b4d;
            margin-bottom: 4px;
            font-size: 14px;
        }
        
        .forecast-insight-text {
            color: #5e6c84;
            font-size: 13px;
            line-height: 1.5;
        }
        
        .trend-indicator {
            display: inline-block;
            width: 0;
            height: 0;
            border-style: solid;
            margin-right: 8px;
        }
        
        .trend-indicator.increasing {
            border-left: 8px solid transparent;
            border-right: 8px solid transparent;
            border-bottom: 12px solid #36B37E;
        }
        
        .trend-indicator.decreasing {
            border-left: 8px solid transparent;
            border-right: 8px solid transparent;
            border-top: 12px solid #FF5630;
        }
        
        .trend-indicator.stable {
            width: 16px;
            height: 2px;
            background: #6B778C;
            border: none;
        }
        
        .forecast-completion {
            margin: 16px 0;
        }
        
        .completion-bar {
            width: 100%;
            height: 8px;
            background: #e4e6ea;
            border-radius: 4px;
            overflow: hidden;
            margin-top: 8px;
        }
        
        .completion-fill {
            height: 100%;
            background: #36B37E;
            transition: width 1s ease-out;
        }
        
        .completion-fill.at-risk {
            background: #FF5630;
        }
        
        .forecast-error {
            text-align: center;
            padding: 20px;
            color: #de350b;
            background: #ffebe6;
            border-radius: 6px;
        }
        
        /* Alert styles when no alerts */
        .alert-card.no-alerts {
            opacity: 0.7;
        }
        
        .alert-card.no-alerts .alert-value {
            color: #42526E;
        }
        
        .alert-card.no-alerts .alert-details {
            color: #6B778C;
        }
        
        .no-alerts-message {
            text-align: center;
            padding: 40px;
            color: #6B778C;
            font-size: 14px;
        }
        
        .alert-severity.critical {
            background: #FF5630;
        }
        
        .alert-severity.warning {
            background: #FFAB00;
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-icon active">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
                <rect x="3" y="3" width="8" height="8" rx="1"/>
                <rect x="13" y="3" width="8" height="8" rx="1"/>
                <rect x="3" y="13" width="8" height="8" rx="1"/>
                <rect x="13" y="13" width="8" height="8" rx="1"/>
            </svg>
        </div>
        <div class="sidebar-icon">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="3" y="3" width="18" height="18" rx="2"/>
                <path d="M12 8v8m-4-4h8"/>
            </svg>
        </div>
        <div class="sidebar-icon">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M22 12h-4l-3 9L9 3l-3 9H2"/>
            </svg>
        </div>
        <div class="sidebar-icon">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M18 20V10m-6 10V4m-6 16v-6"/>
            </svg>
        </div>
        <div class="sidebar-icon">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="3"/>
                <path d="M12 1v6m0 6v6m11-7h-6m-6 0H1"/>
            </svg>
        </div>
    </div>

    <div class="main-content">
        <div class="container">
            <!-- Header -->
            <div class="header">
                <h1>$projectName Dashboard</h1>
                <button class="add-ticket-btn" onclick="window.location.href='${contextPath}/browse/${projectKey}'">
                    <span>+</span> Add New Ticket
                </button>
            </div>

            <!-- Stats Cards -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value" id="velocityMetric">--</div>
                    <div class="stat-label">Sprint Velocity</div>
                    <div class="stat-change positive" id="velocityChange">
                        <span>Loading...</span>
                    </div>
                    <button class="view-details-btn" onclick="JurixDashboard.viewDetails('velocity')">
                        View details
                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M9 18l6-6-6-6"/>
                        </svg>
                    </button>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="cycleTimeMetric">--</div>
                    <div class="stat-label">Cycle Time (days)</div>
                    <div class="stat-change positive" id="cycleTimeChange">
                        <span>Loading...</span>
                    </div>
                    <button class="view-details-btn" onclick="JurixDashboard.viewDetails('cycle')">
                        View details
                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M9 18l6-6-6-6"/>
                        </svg>
                    </button>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="efficiencyMetric">--%</div>
                    <div class="stat-label">Team Efficiency</div>
                    <div class="stat-change positive" id="efficiencyChange">
                        <span>Loading...</span>
                    </div>
                    <button class="view-details-btn" onclick="JurixDashboard.viewDetails('efficiency')">
                        View details
                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M9 18l6-6-6-6"/>
                        </svg>
                    </button>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="activeIssuesMetric">--</div>
                    <div class="stat-label">Active Issues</div>
                    <div class="stat-change" id="activeIssuesChange">
                        <span>Loading...</span>
                    </div>
                    <button class="view-details-btn" onclick="JurixDashboard.viewDetails('issues')">
                        View details
                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M9 18l6-6-6-6"/>
                        </svg>
                    </button>
                </div>
                <div class="alert-card" onclick="JurixDashboard.toggleAlertModal()">
                    <div class="alert-indicator"></div>
                    <div class="alert-dot"></div>
                    <div class="alert-value" id="alertCount">0</div>
                    <div class="alert-label">Critical Alerts</div>
                    <div class="alert-details">Immediate Action Required</div>
                </div>
            </div>

            <!-- Charts Section -->
            <div class="charts-grid">
                <!-- Sprint Progress Overview -->
                <div class="chart-card">
                    <h3 class="chart-title">Sprint Progress Overview</h3>
                    <div class="chart-subtitle">Current sprint: <span id="currentSprint">Loading...</span></div>
                    <div class="progress-legend">
                        <div class="progress-legend-item">
                            <div class="progress-legend-box" style="background-color: #0052CC;"></div>
                            <span>Completed</span>
                        </div>
                        <div class="progress-legend-item">
                            <div class="progress-legend-box" style="background-color: #6B88F7;"></div>
                            <span>In Progress</span>
                        </div>
                        <div class="progress-legend-item">
                            <div class="progress-legend-box" style="background-color: #DFE5FF;"></div>
                            <span>To Do</span>
                        </div>
                    </div>
                    <div class="chart-container">
                        <canvas id="sprintProgressChart"></canvas>
                    </div>
                </div>

                <!-- Sprint Burndown -->
                <div class="chart-card">
                    <h3 class="chart-title">Sprint Burndown</h3>
                    <div class="chart-subtitle">Progress vs. ideal trajectory</div>
                    <div class="chart-container">
                        <canvas id="burndownChart"></canvas>
                    </div>
                </div>

                <!-- Velocity Trend Analysis -->
                <div class="chart-card">
                    <h3 class="chart-title">Velocity Trend Analysis</h3>
                    <div class="chart-subtitle">Story points completed per sprint</div>
                    <div class="chart-container">
                        <canvas id="velocityTrendChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- SPRINT HEALTH AND TEAM PERFORMANCE ROW -->
            <div class="health-performance-grid" style="display: grid; grid-template-columns: 1fr 2fr; gap: 16px; margin-bottom: 28px;">
                
                <!-- Sprint Health Card -->
                <div class="chart-card" style="background: white; padding: 24px; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.06);">
                    <h3 class="chart-title" style="font-size: 16px; font-weight: 600; margin-bottom: 20px;">Sprint Health</h3>
                    
                    <div style="text-align: center; margin-bottom: 20px;">
                        <div id="sprintHealthScore" style="font-size: 48px; font-weight: 700; color: #ffab00; margin-bottom: 8px;">--</div>
                        <div id="sprintHealthStatus" style="font-size: 14px; color: #ffab00; font-weight: 600;">Loading...</div>
                    </div>
                    
                    <div style="margin-top: 20px;">
                        <div id="sprintHealthDetails" style="font-size: 13px; color: #5e6c84; line-height: 1.6;">
                            <!-- Health details will be populated here -->
                        </div>
                    </div>
                    
                    <button class="view-details-btn" style="margin-top: 16px; width: 100%; justify-content: center;" onclick="JurixDashboard.viewSprintHealth()">
                        All systems operational
                    </button>
                </div>
                
                <!-- Team Performance Matrix -->
                <div class="chart-card" style="background: white; padding: 24px; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.06);">
                    <h3 class="chart-title" style="font-size: 16px; font-weight: 600; margin-bottom: 20px;">Team Performance Matrix</h3>
                    
                    <div id="teamPerformanceMatrix" style="overflow-x: auto;">
                        <table style="width: 100%; border-collapse: collapse; font-size: 14px;">
                            <thead>
                                <tr style="border-bottom: 2px solid #e4e6ea;">
                                    <th style="text-align: left; padding: 12px 16px; font-weight: 600; color: #5e6c84;">Name</th>
                                    <th style="text-align: center; padding: 12px 16px; font-weight: 600; color: #5e6c84;">Completed</th>
                                    <th style="text-align: center; padding: 12px 16px; font-weight: 600; color: #5e6c84;">Cycle Time</th>
                                    <th style="text-align: center; padding: 12px 16px; font-weight: 600; color: #5e6c84;">Efficiency</th>
                                    <th style="text-align: right; padding: 12px 16px; font-weight: 600; color: #5e6c84;">Rating</th>
                                </tr>
                            </thead>
                            <tbody id="teamPerformanceBody">
                                <!-- Team members will be populated here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- AI INSIGHTS SECTION -->
            <div class="ai-insights-wrapper">
                <div class="ai-top-actions">
                    <button class="ai-action-btn secondary" onclick="JurixDashboard.runSprintAnalysis()">AI Sprint Analysis</button>
                    <button class="ai-action-btn primary" onclick="JurixDashboard.generateReport()">Generate Report</button>
                </div>

                <div class="ai-header">
                    <h2 class="ai-title">
                        AI Insights
                        <span class="ai-indicator">POWERED BY ML</span>
                    </h2>
                </div>

                <div class="ai-content-grid">
                    <!-- Left Column -->
                    <div class="ai-left-section">
                        <!-- Sprint Risk Assessment -->
                        <div class="risk-card">
                            <div class="risk-header">
                                <h3 class="risk-title">Sprint Risk Assessment</h3>
                                <div class="risk-value" id="riskScore">--</div>
                                <div class="risk-label">Risk Score (Critical: >4.0)</div>
                            </div>
                            
                            <div class="bar-chart" id="riskChart">
                                <!-- Risk bars will be populated by JavaScript -->
                            </div>
                        </div>

                        <!-- Project Predictions -->
                        <div class="market-card">
                            <h3 class="risk-title">Project Predictions</h3>
                            <div id="predictionsContainer">
                                <!-- Predictions will be populated by JavaScript -->
                            </div>
                        </div>
                    </div>

                    <!-- Right Column -->
                    <div class="ai-right-section">
                        <!-- Performance Forecasts -->
                        <div class="performance-card">
                            <h3 class="risk-title">Sprint Performance Forecasts</h3>
                            <p class="performance-subtitle">
                                Want to predict sprint outcomes, manage team capacity, and optimize your delivery pipeline?
                            </p>
                            
                            <div class="forecast-pills">
                                <div class="forecast-indicator pos-1"></div>
                                <button class="forecast-pill active" onclick="JurixDashboard.switchForecast(1, this)">Velocity Trend</button>
                                <button class="forecast-pill" onclick="JurixDashboard.switchForecast(2, this)">Burndown Rate</button>
                                <button class="forecast-pill" onclick="JurixDashboard.switchForecast(3, this)">Team Capacity</button>
                            </div>
                            
                            <button class="apply-btn forecast-start-btn" onclick="JurixDashboard.startForecast()">
                                <span>Start forecast</span>
                            </button>
                        </div>

                        <!-- AI Recommendations -->
                        <div class="recommendations-section">
                            <h3 class="risk-title">AI Recommendations</h3>
                            
                            <div class="recommendations-grid" id="recommendationsGrid">
                                <!-- Recommendations will be populated by JavaScript -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Alert Modal -->
            <div class="modal-overlay" id="modalOverlay" onclick="JurixDashboard.toggleAlertModal()"></div>
            <div class="alert-modal" id="alertModal">
                <div class="modal-header">
                    <div class="modal-title">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#ff5630" stroke-width="2">
                            <path d="M10.29 3.86L1.82 18a2 2 0 001.71 3h16.94a2 2 0 001.71-3L13.71 3.86a2 2 0 00-3.42 0z"/>
                            <line x1="12" y1="9" x2="12" y2="13"/>
                            <line x1="12" y1="17" x2="12.01" y2="17"/>
                        </svg>
                        Critical System Alerts
                    </div>
                    <button class="close-btn" onclick="JurixDashboard.toggleAlertModal()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#5e6c84" stroke-width="2">
                            <line x1="18" y1="6" x2="6" y2="18"/>
                            <line x1="6" y1="6" x2="18" y2="18"/>
                        </svg>
                    </button>
                </div>
                <div class="alert-list" id="alertList">
                    <!-- Alerts will be populated by JavaScript -->
                </div>
            </div>

            <!-- Tooltip -->
            <div class="tooltip" id="tooltip"></div>
        </div>
    </div>

    <script type="text/javascript">
    /* <![CDATA[ */
    // Pass project key and API configuration to JavaScript
    window.JurixData = {
        projectKey: '$projectKey',
        projectName: '$projectName',
        contextPath: window.location.pathname.substring(0, window.location.pathname.indexOf('/plugins'))
    };
    // INITIALIZE THE FORECAST TYPE
    window.currentForecastType = 'velocity';

    // Complete JurixDashboard implementation
    window.JurixDashboard = {
        currentProjectKey: '$projectKey',
        charts: {},
        updateInterval: null,
        lastUpdateTimestamp: Date.now(),
        pollInterval: null,
        isPolling: false,
        pollFrequency: 5000,
        MIN_POLL_FREQUENCY: 2000,
        MAX_POLL_FREQUENCY: 30000,
        currentForecastType: 'velocity',
        
        init: function() {
            console.log('🚀 Initializing JURIX Dashboard with New Layout...');
            
            this.currentProjectKey = window.JurixData && window.JurixData.projectKey;
            if (!this.currentProjectKey) {
                var urlParams = new URLSearchParams(window.location.search);
                this.currentProjectKey = urlParams.get('projectKey');
            }
            
            console.log('📋 Current project key:', this.currentProjectKey);
            
            if (this.currentProjectKey) {
                this.loadDashboardData();
                this.startPolling();
                this.initializeSprintForecast();
            } else {
                console.error('❌ No project key found!');
                this.showError('No project key specified');
            }
            
            this.bindEvents();
            this.initializeTooltips();
            this.initializeInteractions();
        },
        
        loadDashboardData: function() {
            var self = this;
            if (!this.currentProjectKey) {
                console.error('No project key specified');
                return;
            }
            
            console.log('Loading dashboard data for project:', this.currentProjectKey);
            
            this.showLoadingState();
            
            var baseUrl = window.location.origin;
            var restUrl = baseUrl + '/rest/jurix/1.0/dashboard/' + this.currentProjectKey;
            
            console.log('Calling REST endpoint:', restUrl);
            
            fetch(restUrl, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            })
            .then(function(response) {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    throw new Error('HTTP error! status: ' + response.status);
                }
                return response.json();
            })
            .then(function(data) {
                console.log('Dashboard data received:', data);
                
                if (data.status === 'success' || data.project_id) {
                    window.lastDashboardData = data;
                    self.updateDashboard(data);
                    self.hideLoadingState();
                    console.log('✅ Dashboard updated successfully');
                } else {
                    throw new Error(data.error || 'Failed to load dashboard data');
                }
            })
            .catch(function(error) {
                console.error('Error loading dashboard:', error);
                self.hideLoadingState();
                self.showError('Failed to load dashboard: ' + error.message);
            });
        },
        
        updateDashboard: function(data) {
            console.log('Updating dashboard with enhanced data:', data);
            
            if (data.metrics) {
                this.updateMetrics(data.metrics);
            }

            // Handle sprint health
            var healthData = data.sprintHealth || data.healthHistory;
            if (healthData) {
                this.updateSprintHealth(healthData);
            }
            
            // Handle team performance - IT'S IN teamAnalytics.individualMetrics!
            if (data.teamAnalytics && data.teamAnalytics.individualMetrics) {
                console.log('Found team analytics:', data.teamAnalytics);
                
                // Convert individualMetrics OBJECT to array
                var individualMetrics = data.teamAnalytics.individualMetrics;
                var membersArray = [];
                
                // Loop through the object keys (names)
                for (var name in individualMetrics) {
                    if (individualMetrics.hasOwnProperty(name)) {
                        var memberData = individualMetrics[name];
                        membersArray.push({
                            name: name,
                            completed: memberData.completed || 0,
                            cycleTime: memberData.avg_cycle_time || 0,
                            efficiency: Math.round((memberData.efficiency || 0) * 100),  // Convert to percentage
                            rating: memberData.performance_score || Math.round((memberData.efficiency || 0) * 100)
                        });
                    }
                }
                
                var teamData = {
                    members: membersArray
                };
                
                this.updateTeamPerformance(teamData);
            }
            
            
            if (data.predictions) {
                this.updatePredictions(data.predictions);
                
                if (data.predictions.aiSummary) {
                    this.updateAISummary(data.predictions.aiSummary);
                }
                
                if (data.predictions.ticketPredictions) {
                    this.updateTicketPredictions(data.predictions.ticketPredictions);
                }
            }
            
            if (data.recommendations) {
                this.updateRecommendations(data.recommendations);
            }
            
            if (data.visualizationData) {
                this.updateCharts(data.visualizationData);
            }
            
            if (data.alerts) {
                this.updateAlerts(data.alerts);
            }
            
            if (data.riskAssessment) {
                this.updateRiskAssessment(data.riskAssessment);
            }
            
            if (data.sprintHealth) {
                this.updateSprintHealthPulse(data.sprintHealth);
            }
            
            if (data.teamEnergy) {
                this.updateTeamEnergyMeter(data.teamEnergy);
            }
            
            if (data.teamAnalytics) {
                this.updateTeamAnalytics(data.teamAnalytics);
            }
            
            if (data.criticalFactors && data.criticalFactors.length > 0) {
                this.showCriticalFactors(data.criticalFactors);
            }
            
            this.updateLastUpdatedTime(data.lastUpdated);
        },
        
        updateMetrics: function(metrics) {
            console.log('Updating metrics:', metrics);
            
            var velocityEl = document.getElementById('velocityMetric');
            if (velocityEl && metrics.velocity !== undefined) {
                this.animateValue(velocityEl, metrics.velocity);
                this.updateMetricChange('velocityChange', metrics.velocityChange || { type: 'positive', value: '+12% from last sprint' });
            }
            
            var cycleTimeEl = document.getElementById('cycleTimeMetric');
            if (cycleTimeEl && metrics.cycleTime !== undefined) {
                this.animateValue(cycleTimeEl, metrics.cycleTime, 1, 'd');
                this.updateMetricChange('cycleTimeChange', metrics.cycleTimeChange || { type: 'positive', value: '-0.5 days improvement' });
            }
            
            var efficiencyEl = document.getElementById('efficiencyMetric');
            if (efficiencyEl && metrics.efficiency !== undefined) {
                this.animateValue(efficiencyEl, metrics.efficiency, 0, '%');
                this.updateMetricChange('efficiencyChange', metrics.efficiencyChange || { type: 'positive', value: 'Above target' });
            }
            
            var activeIssuesEl = document.getElementById('activeIssuesMetric');
            if (activeIssuesEl && metrics.activeIssues !== undefined) {
                this.animateValue(activeIssuesEl, metrics.activeIssues);
                
                var blockerCount = metrics.blockers || 0;
                if (blockerCount > 0) {
                    this.updateMetricChange('activeIssuesChange', {
                        type: 'negative',
                        value: blockerCount + ' blockers'
                    });
                }
            }
            
            var alertCountEl = document.getElementById('alertCount');
            if (alertCountEl && metrics.criticalAlerts !== undefined) {
                this.animateValue(alertCountEl, metrics.criticalAlerts);
            }
        },
        
        updateMetricChange: function(elementId, changeData) {
            var changeEl = document.getElementById(elementId);
            if (!changeEl) return;
            
            if (changeData) {
                var iconSvg = changeData.type === 'positive' 
                    ? '<svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor"><path d="M7 14l5-5 5 5H7z"/></svg>'
                    : '<svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor"><path d="M17 10l-5 5-5-5h10z"/></svg>';
                
                changeEl.className = 'stat-change ' + changeData.type;
                changeEl.innerHTML = iconSvg + ' ' + (changeData.value || changeData.text || '');
            }
        },
        
        updatePredictions: function(predictions) {
            console.log('Updating predictions:', predictions);
            
            var container = document.getElementById('predictionsContainer');
            if (!container) return;
            
            container.innerHTML = '';
            
            if (predictions.sprintCompletion) {
                var item = this.createPredictionItem(
                    'Sprint Completion Forecast',
                    predictions.sprintCompletion.probability,
                    predictions.sprintCompletion.reasoning,
                    'growth'
                );
                container.appendChild(item);
            }
            
            if (predictions.bottlenecks && predictions.bottlenecks.length > 0) {
                var bottleneck = predictions.bottlenecks[0];
                var item = this.createPredictionItem(
                    'Bottleneck Detection',
                    bottleneck.severity,
                    bottleneck.description,
                    'warning'
                );
                container.appendChild(item);
            }
        },
        
        createPredictionItem: function(title, value, description, type) {
            var div = document.createElement('div');
            div.className = 'prediction-item';
            div.innerHTML = 
                '<div class="prediction-header">' +
                    '<div class="prediction-icon ' + type + '">' +
                        (type === 'growth' ? 
                            '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M2 12l3 9h14l3-9M2 12l3-9h14l3 9M2 12h20"/><circle cx="12" cy="12" r="2"/></svg>' :
                            '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M12 2v20M2 12h20M12 2a10 10 0 110 20 10 10 0 010-20z"/><path d="M12 8v4m0 4h.01"/></svg>'
                        ) +
                    '</div>' +
                    '<div>' +
                        '<div class="prediction-title">' + title + '</div>' +
                    '</div>' +
                '</div>' +
                '<div class="prediction-description">' + description + '</div>' +
                '<div class="prediction-metric">↗ ' + value + '</div>';
            return div;
        },
        
        updateRecommendations: function(recommendations) {
            console.log('Updating recommendations:', recommendations);
            
            var container = document.getElementById('recommendationsGrid');
            if (!container) return;
            
            container.innerHTML = '';
            
            var recommendationTypes = [
                { icon: 'portfolio', title: 'Sprint Optimization' },
                { icon: 'compliance', title: 'Resource Balancing' },
                { icon: 'service', title: 'Automation Opportunities' },
                { icon: 'risk', title: 'Quality Improvements' }
            ];
            
            var self = this;
            recommendations.slice(0, 4).forEach(function(rec, index) {
                var type = recommendationTypes[index % recommendationTypes.length];
                var card = self.createRecommendationCard(type.icon, type.title, rec, index);
                container.appendChild(card);
            });
        },
        
        createRecommendationCard: function(iconType, title, description, index) {
            var div = document.createElement('div');
            div.className = 'recommendation-card';
           div.innerHTML = 
               '<div class="rec-icon ' + iconType + '">' +
                   this.getRecommendationIcon(iconType) +
               '</div>' +
               '<div class="rec-title">' + title + '</div>' +
               '<div class="rec-description">' + description + '</div>' +
               '<button class="apply-btn" onclick="JurixDashboard.applyRecommendation(' + index + ')">' +
                   '<span>Apply</span>' +
               '</button>';
           return div;
       },
       
       getRecommendationIcon: function(type) {
           var icons = {
               portfolio: '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="3" y="3" width="18" height="18" rx="2"/><path d="M3 9h18M9 21V9"/></svg>',
               compliance: '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M16 21v-2a4 4 0 00-4-4H6a4 4 0 00-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 00-3-3.87M16 3.13a4 4 0 010 7.75"/></svg>',
               service: '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"/></svg>',
               risk: '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/></svg>'
           };
           return icons[type] || '';
       },
       
       updateCharts: function(visualizationData) {
           console.log('Updating charts:', visualizationData);
           
           var charts = visualizationData.charts || {};
           
           if (charts.sprintProgress || charts.teamWorkload) {
               var progressData = charts.sprintProgress || charts.teamWorkload;
               this.updateSprintProgressChart(progressData);
           }
           
           if (charts.burndown) {
               this.updateBurndownChart(charts.burndown);
           }
           
           if (charts.velocityTrend) {
               this.updateVelocityTrendChart(charts.velocityTrend);
           }
       },
       
       updateSprintProgressChart: function(chartData) {
           console.log('Updating sprint progress chart:', chartData);
           
           var canvas = document.getElementById('sprintProgressChart');
           if (!canvas) {
               console.error('Sprint progress canvas not found');
               return;
           }
           
           if (this.charts.sprintProgress) {
               this.charts.sprintProgress.destroy();
           }
           
           var ctx = canvas.getContext('2d');
           
           var data = chartData?.data || {
               labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
               datasets: [{
                   label: 'Completed',
                   data: [10, 25, 45, 60],
                   backgroundColor: '#0052CC',
                   stack: 'stack0'
               }, {
                   label: 'In Progress',
                   data: [30, 35, 30, 25],
                   backgroundColor: '#6B88F7',
                   stack: 'stack0'
               }, {
                   label: 'To Do',
                   data: [60, 40, 25, 15],
                   backgroundColor: '#DFE5FF',
                   stack: 'stack0'
               }]
           };
           
           this.charts.sprintProgress = new Chart(ctx, {
               type: 'bar',
               data: data,
               options: {
                   responsive: true,
                   maintainAspectRatio: false,
                   plugins: {
                       title: {
                           display: false
                       },
                       legend: {
                           display: false
                       },
                       tooltip: {
                           callbacks: {
                               label: function(context) {
                                   var label = context.dataset.label || '';
                                   var value = context.parsed.y || 0;
                                   return label + ': ' + value + ' tickets';
                               },
                               afterLabel: function(context) {
                                   var datasetIndex = context.datasetIndex;
                                   var dataIndex = context.dataIndex;
                                   var total = 0;
                                   
                                   data.datasets.forEach(function(dataset) {
                                       total += dataset.data[dataIndex] || 0;
                                   });
                                   
                                   var value = context.parsed.y || 0;
                                   var percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                                   return percentage + '% of total';
                               }
                           }
                       }
                   },
                   scales: {
                       x: {
                           stacked: true,
                           grid: {
                               display: false
                           }
                       },
                       y: {
                           stacked: true,
                           beginAtZero: true,
                           grid: {
                               color: 'rgba(0, 0, 0, 0.05)'
                           },
                           ticks: {
                               stepSize: 10
                           }
                       }
                   }
               }
           });
       },
       
       updateBurndownChart: function(chartData) {
           console.log('Updating burndown chart:', chartData);
           
           var canvas = document.getElementById('burndownChart');
           if (!canvas) {
               console.error('Burndown canvas not found');
               return;
           }
           
           if (this.charts.burndown) {
               this.charts.burndown.destroy();
           }
           
           var ctx = canvas.getContext('2d');
           
           var data = chartData?.data || {
               labels: ['Day 0', 'Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7', 'Day 8', 'Day 9', 'Day 10'],
               datasets: [{
                   label: 'Ideal',
                   data: [60, 54, 48, 42, 36, 30, 24, 18, 12, 6, 0],
                   borderColor: '#C1C7D0',
                   borderDash: [5, 5],
                   tension: 0,
                   fill: false,
                   pointRadius: 3,
                   pointHoverRadius: 5
               }, {
                   label: 'Actual',
                   data: [60, 58, 52, 45, 38, 30, 25, 20, null, null, null],
                   borderColor: '#0052CC',
                   backgroundColor: 'rgba(0, 82, 204, 0.1)',
                   tension: 0.3,
                   fill: true,
                   pointRadius: 4,
                   pointHoverRadius: 6
               }]
           };
           
           this.charts.burndown = new Chart(ctx, {
               type: 'line',
               data: data,
               options: {
                   responsive: true,
                   maintainAspectRatio: false,
                   interaction: {
                       mode: 'index',
                       intersect: false
                   },
                   plugins: {
                       legend: {
                           position: 'bottom',
                           labels: {
                               usePointStyle: true,
                               padding: 15
                           }
                       },
                       tooltip: {
                           mode: 'index',
                           intersect: false,
                           callbacks: {
                               label: function(context) {
                                   var label = context.dataset.label || '';
                                   if (label) {
                                       label += ': ';
                                   }
                                   if (context.parsed.y !== null) {
                                       label += context.parsed.y + ' story points';
                                   }
                                   return label;
                               }
                           }
                       }
                   },
                   scales: {
                       x: {
                           grid: {
                               display: false
                           }
                       },
                       y: {
                           beginAtZero: true,
                           title: {
                               display: true,
                               text: 'Story Points',
                               font: {
                                   size: 12
                               }
                           },
                           grid: {
                               color: 'rgba(0, 0, 0, 0.05)'
                           }
                       }
                   }
               }
           });
       },
       
       updateVelocityTrendChart: function(chartData) {
           console.log('Updating velocity trend chart:', chartData);
           
           var canvas = document.getElementById('velocityTrendChart');
           if (!canvas) {
               console.error('Velocity trend canvas not found');
               return;
           }
           
           if (this.charts.velocityTrend) {
               this.charts.velocityTrend.destroy();
           }
           
           var ctx = canvas.getContext('2d');
           
           var data = chartData?.data || {
               labels: ['Week -2', 'Week -1', 'Current', 'Next Week', 'Week +2', 'Week +3'],
               datasets: [{
                   label: 'Velocity',
                   data: [5, 6, 7, 7, 7, 7],
                   borderColor: '#36B37E',
                   backgroundColor: 'rgba(54, 179, 126, 0.15)',
                   tension: 0.4,
                   fill: true,
                   pointRadius: 6,
                   pointHoverRadius: 8,
                   pointBackgroundColor: '#36B37E',
                   pointBorderColor: '#fff',
                   pointBorderWidth: 2,
                   borderWidth: 3
               }]
           };
           
           this.charts.velocityTrend = new Chart(ctx, {
               type: 'line',
               data: data,
               options: {
                   responsive: true,
                   maintainAspectRatio: false,
                   plugins: {
                       legend: {
                           display: false
                       },
                       tooltip: {
                           backgroundColor: 'rgba(255, 255, 255, 0.95)',
                           titleColor: '#172b4d',
                           bodyColor: '#172b4d',
                           borderColor: '#dfe1e6',
                           borderWidth: 1,
                           padding: 12,
                           displayColors: false,
                           callbacks: {
                               label: function(context) {
                                   return 'Velocity: ' + context.parsed.y + ' points';
                               },
                               afterLabel: function(context) {
                                   var dataIndex = context.dataIndex;
                                   if (dataIndex > 0) {
                                       var prevValue = context.dataset.data[dataIndex - 1];
                                       var currentValue = context.parsed.y;
                                       var change = currentValue - prevValue;
                                       var changePercent = ((change / prevValue) * 100).toFixed(1);
                                       return 'Change: ' + (change >= 0 ? '+' : '') + change + ' (' + changePercent + '%)';
                                   }
                                   return '';
                               }
                           }
                       }
                   },
                   scales: {
                       x: {
                           grid: {
                               display: false
                           },
                           ticks: {
                               color: '#5e6c84',
                               font: {
                                   size: 12
                               }
                           }
                       },
                       y: {
                           beginAtZero: true,
                           title: {
                               display: true,
                               text: 'Story Points',
                               font: {
                                   size: 12
                               },
                               color: '#5e6c84'
                           },
                           grid: {
                               color: 'rgba(0, 0, 0, 0.05)'
                           },
                           ticks: {
                               color: '#5e6c84',
                               stepSize: 1,
                               font: {
                                   size: 12
                               }
                           }
                       }
                   }
               }
           });
       },
       
       updateRiskAssessment: function(riskData) {
           console.log('Updating risk assessment with real data:', riskData);
           
           var riskScoreEl = document.getElementById('riskScore');
           if (riskScoreEl && riskData.score !== undefined) {
               this.animateValue(riskScoreEl, riskData.score, 1);
               
               var riskCard = riskScoreEl.closest('.risk-card');
               if (riskCard) {
                   riskCard.classList.remove('low-risk', 'medium-risk', 'high-risk', 'critical-risk');
                   riskCard.classList.add(riskData.level + '-risk');
               }
           }
           
           var riskChartEl = document.getElementById('riskChart');
           if (riskChartEl && riskData.monthlyScores) {
               riskChartEl.innerHTML = '';
               
               var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
               var currentMonth = new Date().getMonth();
               var maxScore = Math.max.apply(Math, riskData.monthlyScores.concat([10]));
               
               months.forEach(function(month, index) {
                   var score = riskData.monthlyScores[index] || 0;
                   var heightPercent = (score / maxScore) * 100;
                   
                   var bar = document.createElement('div');
                   bar.className = 'bar' + (index === currentMonth ? ' active' : '');
                   bar.style.height = heightPercent + '%';
                   bar.innerHTML = '<span class="bar-label">' + month + '</span>';
                   
                   if (score > 7) {
                       bar.style.backgroundColor = '#FF5630';
                   } else if (score > 5) {
                       bar.style.backgroundColor = '#FFAB00';
                   } else if (score > 3) {
                       bar.style.backgroundColor = '#36B37E';
                   } else {
                       bar.style.backgroundColor = '#00875A';
                   }
                   
                   bar.title = month + ': Risk score ' + score.toFixed(2);
                   
                   riskChartEl.appendChild(bar);
               });
           }
           
           if (riskData.factors && riskData.factors.length > 0) {
               var riskLabel = document.querySelector('.risk-label');
               if (riskLabel) {
                   var topFactor = riskData.factors[0];
                   riskLabel.textContent = 'Top risk: ' + topFactor.factor;
               }
           }
       },
       
       updateAlerts: function(alerts) {
           console.log('Updating alerts:', alerts);
           
           if (!alerts || alerts.length === 0) {
               var riskScore = window.lastDashboardData?.riskAssessment?.score || 0;
               var sprintCompletion = window.lastDashboardData?.predictions?.sprintCompletion?.probability || 1;
               
               alerts = [];
               
               if (riskScore > 4) {
                   alerts.push({
                       type: 'critical',
                       message: 'High risk score detected: ' + riskScore.toFixed(1),
                       time: 'Just now',
                       action: 'Review risk factors immediately'
                   });
               }
               
               if (sprintCompletion < 0.7) {
                   alerts.push({
                       type: 'warning',
                       message: 'Sprint completion at risk: ' + (sprintCompletion * 100).toFixed(0) + '%',
                       time: '2 minutes ago',
                       action: 'Review sprint backlog'
                   });
               }
           }
           
           var alertCountEl = document.getElementById('alertCount');
           if (alertCountEl) {
               alertCountEl.textContent = alerts.length;
               
               var alertCard = document.querySelector('.alert-card');
               if (alertCard) {
                   if (alerts.length === 0) {
                       alertCard.classList.add('no-alerts');
                       var alertIndicator = document.querySelector('.alert-indicator');
                       var alertDot = document.querySelector('.alert-dot');
                       if (alertIndicator) alertIndicator.style.display = 'none';
                       if (alertDot) alertDot.style.display = 'none';
                   } else {
                       alertCard.classList.remove('no-alerts');
                       var alertIndicator = document.querySelector('.alert-indicator');
                       var alertDot = document.querySelector('.alert-dot');
                       if (alertIndicator) alertIndicator.style.display = 'block';
                       if (alertDot) alertDot.style.display = 'block';
                   }
               }
           }
           
           var alertListEl = document.getElementById('alertList');
           if (alertListEl) {
               alertListEl.innerHTML = '';
               
               if (alerts.length === 0) {
                   alertListEl.innerHTML = '<div class="no-alerts-message">No critical alerts at this time. System is healthy!</div>';
               } else {
                   var self = this;
                   alerts.forEach(function(alert) {
                       var alertItem = document.createElement('div');
                       alertItem.className = 'alert-item';
                       alertItem.innerHTML = 
                           '<div class="alert-item-left">' +
                               '<div class="alert-severity ' + alert.type + '"></div>' +
                               '<span class="alert-text">' + alert.message + '</span>' +
                           '</div>' +
                           '<span class="alert-time">' + (alert.time || 'Just now') + '</span>';
                       alertListEl.appendChild(alertItem);
                   });
               }
           }
       },
       
       initializeSprintForecast: function() {
            var self = this;
            window.JurixDashboard.startForecast = function() {
                console.log('Starting forecast for type:', window.currentForecastType);
                
                var forecastCard = document.querySelector('.performance-card');
                if (!forecastCard) return;
                
                var loadingHtml = 
                    '<div class="forecast-loading">' +
                        '<div class="loading-spinner"></div>' +
                        '<span>Generating ' + window.currentForecastType + ' forecast...</span>' +
                    '</div>';
                
                var resultsContainer = forecastCard.querySelector('.forecast-results');
                if (!resultsContainer) {
                    resultsContainer = document.createElement('div');
                    resultsContainer.className = 'forecast-results';
                    forecastCard.appendChild(resultsContainer);
                }
                
                resultsContainer.innerHTML = loadingHtml;
                
                var baseUrl = window.location.origin;
                var forecastUrl = baseUrl + '/rest/jurix/1.0/dashboard/forecast/' + self.currentProjectKey;
                
                console.log('Calling forecast URL:', forecastUrl);
                console.log('Request body:', JSON.stringify({ type: window.currentForecastType }));
                
                fetch(forecastUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        type: window.currentForecastType
                    })
                })
                .then(function(response) {
                    console.log('Forecast response status:', response.status);
                    console.log('Response headers:', response.headers);
                    
                    // Check content type
                    var contentType = response.headers.get("content-type");
                    if (contentType && contentType.indexOf("application/json") === -1) {
                        console.error('Response is not JSON:', contentType);
                        return response.text().then(function(text) {
                            console.error('Response body:', text);
                            throw new Error('Server returned HTML instead of JSON. Check server logs.');
                        });
                    }
                    
                    if (!response.ok) {
                        throw new Error('HTTP error! status: ' + response.status);
                    }
                    
                    return response.json();
                })
                .then(function(data) {
                    console.log('Forecast data received:', data);
                    
                    if (data.status === 'success' || data.data) {
                        self.displayEnhancedForecastResults(data, resultsContainer);
                    } else {
                        throw new Error(data.error || 'Failed to generate forecast');
                    }
                })
                .catch(function(error) {
                    console.error('Error generating forecast:', error);
                    
                    resultsContainer.innerHTML = 
                        '<div class="forecast-error">' +
                            '<span>⚠️ Failed to generate forecast: ' + error.message + '</span>' +
                            '<br><small>Check if the Python backend is running at port 5001</small>' +
                        '</div>';
                });
            };
        },
       
       displayEnhancedForecastResults: function(forecastData, container) {
           var type = forecastData.type;
           var data = forecastData.data;
           
           var resultsHtml = '';
           
           if (type === 'velocity') {
               var hasChartData = data.chart && data.chart.data;
               
               resultsHtml = 
                   '<div class="forecast-result-header">' +
                       '<h4>Velocity Forecast</h4>' +
                       '<span class="forecast-confidence">Confidence: ' + Math.round((data.confidence || 0.7) * 100) + '%</span>' +
                   '</div>' +
                   '<div class="forecast-trend ' + (data.trend || 'stable') + '">' +
                       '<div class="trend-indicator ' + (data.trend || 'stable') + '"></div>' +
                       'Trend: <strong>' + (data.trend || 'stable') + '</strong>' +
                       (data.trend_percentage ? ' (' + (data.trend_percentage > 0 ? '+' : '') + data.trend_percentage.toFixed(1) + '%)' : '') +
                   '</div>' +
                   (hasChartData ? 
                       '<div class="forecast-visual">' +
                           '<canvas id="velocityForecastChart" height="150"></canvas>' +
                       '</div>' : '') +
                   '<div class="forecast-metrics">' +
                       '<div class="metric-row">' +
                           '<span class="metric-label">Current Velocity:</span>' +
                           '<span class="metric-value">' + (data.current_velocity || 0) + ' points/week</span>' +
                       '</div>' +
                       '<div class="metric-row">' +
                           '<span class="metric-label">Next Week Estimate:</span>' +
                           '<span class="metric-value">' + (data.next_week_estimate || 0) + ' points</span>' +
                       '</div>' +
                       '<div class="metric-row">' +
                           '<span class="metric-label">Historical Average:</span>' +
                           '<span class="metric-value">' + (data.historical_average || 0).toFixed(1) + ' points</span>' +
                       '</div>' +
                   '</div>' +
                   '<div class="forecast-insight-card">' +
                       '<div class="forecast-insight-icon">' +
                           '<svg viewBox="0 0 24 24" fill="currentColor">' +
                               '<path d="M13 7.5a1 1 0 11-2 0 1 1 0 012 0zm-3 3.75a.75.75 0 01.75-.75h1.5a.75.75 0 01.75.75v4.25h.75a.75.75 0 010 1.5h-3a.75.75 0 010-1.5h.75V12h-.75a.75.75 0 01-.75-.75z"/>' +
                               '<path fill-rule="evenodd" d="M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11S18.075 1 12 1zM2.5 12a9.5 9.5 0 1119 0 9.5 9.5 0 01-19 0z"/>' +
                           '</svg>' +
                       '</div>' +
                       '<div class="forecast-insight-content">' +
                           '<div class="forecast-insight-title">Insight</div>' +
                           '<div class="forecast-insight-text">' + (data.insights || 'Based on historical data and current sprint progress, velocity is expected to remain stable.') + '</div>' +
                       '</div>' +
                   '</div>';
               
               if (data.recommendations && data.recommendations.length > 0) {
                   resultsHtml += 
                       '<div class="forecast-insight-card">' +
                           '<div class="forecast-insight-icon">' +
                               '<svg viewBox="0 0 24 24" fill="currentColor">' +
                                   '<path d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>' +
                               '</svg>' +
                           '</div>' +
                           '<div class="forecast-insight-content">' +
                               '<div class="forecast-insight-title">Recommendations</div>' +
                               '<div class="forecast-insight-text">';
                   
                   data.recommendations.forEach(function(r) {
                       resultsHtml += '• ' + r + '<br>';
                   });
                   
                   resultsHtml += '</div></div></div>';
               }
           } else if (type === 'burndown') {
               var riskClass = data.at_risk ? 'at-risk' : 'on-track';
               var hasChartData = data.chart && data.chart.data;
               
               resultsHtml = 
                   '<div class="forecast-result-header">' +
                       '<h4>Burndown Rate Forecast</h4>' +
                       '<span class="forecast-confidence ' + riskClass + '">' +
                           (data.at_risk ? '⚠️ At Risk' : '✅ On Track') +
                       '</span>' +
                   '</div>' +
                   '<div class="forecast-completion">' +
                       'Sprint Completion: <strong>' + Math.round((data.completion_probability || 0) * 100) + '%</strong>' +
                       '<div class="completion-bar">' +
                           '<div class="completion-fill ' + riskClass + '" style="width: ' + ((data.completion_probability || 0) * 100) + '%"></div>' +
                       '</div>' +
                   '</div>' +
                   (hasChartData ? 
                       '<div class="forecast-visual">' +
                           '<canvas id="burndownForecastChart" height="150"></canvas>' +
                       '</div>' : '') +
                   '<div class="forecast-metrics">' +
                       '<div class="metric-row">' +
                           '<span class="metric-label">Current Burn Rate:</span>' +
                           '<span class="metric-value">' + (data.current_burn_rate || 0).toFixed(1) + ' points/day</span>' +
                       '</div>' +
                       '<div class="metric-row">' +
                           '<span class="metric-label">Required Rate:</span>' +
                           '<span class="metric-value">' + (data.required_burn_rate || 0).toFixed(1) + ' points/day</span>' +
                       '</div>' +
                       '<div class="metric-row">' +
                           '<span class="metric-label">Estimated Completion:</span>' +
                           '<span class="metric-value">' + (data.estimated_completion_date || 'Unknown') + '</span>' +
                       '</div>' +
                   '</div>' +
                   '<div class="forecast-insight-card">' +
                       '<div class="forecast-insight-icon">' +
                           '<svg viewBox="0 0 24 24" fill="currentColor">' +
                               '<path d="M13 7.5a1 1 0 11-2 0 1 1 0 012 0zm-3 3.75a.75.75 0 01.75-.75h1.5a.75.75 0 01.75.75v4.25h.75a.75.75 0 010 1.5h-3a.75.75 0 010-1.5h.75V12h-.75a.75.75 0 01-.75-.75z"/>' +
                               '<path fill-rule="evenodd" d="M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11S18.075 1 12 1zM2.5 12a9.5 9.5 0 1119 0 9.5 9.5 0 01-19 0z"/>' +
                           '</svg>' +
                       '</div>' +
                       '<div class="forecast-insight-content">' +
                           '<div class="forecast-insight-title">Insight</div>' +
                           '<div class="forecast-insight-text">' + (data.insights || 'Current burndown rate analysis.') + '</div>' +
                       '</div>' +
                   '</div>';
           } else if (type === 'capacity') {
               var trendClass = data.capacity_trend === 'declining' ? 'declining' : 
                               data.capacity_trend === 'overloaded' ? 'overloaded' : 'stable';
               
               resultsHtml = 
                   '<div class="forecast-result-header">' +
                       '<h4>Team Capacity Forecast</h4>' +
                       '<span class="forecast-capacity-trend ' + trendClass + '">' +
                           (data.capacity_trend === 'declining' ? '📉 Declining' : 
                           data.capacity_trend === 'overloaded' ? '⚠️ Overloaded' :
                           data.capacity_trend === 'underutilized' ? '📊 Underutilized' : '✅ Stable') +
                       '</span>' +
                   '</div>' +
                   '<div class="forecast-metrics">' +
                       '<div class="metric-row">' +
                           '<span class="metric-label">Current Utilization:</span>' +
                           '<span class="metric-value">' + (data.current_utilization || 0) + '%</span>' +
                       '</div>' +
                       '<div class="metric-row">' +
                           '<span class="metric-label">Optimal Range:</span>' +
                           '<span class="metric-value">70-85%</span>' +
                       '</div>' +
                       '<div class="metric-row">' +
                           '<span class="metric-label">Team Members:</span>' +
                           '<span class="metric-value">' + (data.team_size || 0) + ' active</span>' +
                       '</div>' +
                   '</div>' +
                   '<div class="forecast-insight-card">' +
                       '<div class="forecast-insight-icon">' +
                           '<svg viewBox="0 0 24 24" fill="currentColor">' +
                               '<path d="M13 7.5a1 1 0 11-2 0 1 1 0 012 0zm-3 3.75a.75.75 0 01.75-.75h1.5a.75.75 0 01.75.75v4.25h.75a.75.75 0 010 1.5h-3a.75.75 0 010-1.5h.75V12h-.75a.75.75 0 01-.75-.75z"/>' +
                               '<path fill-rule="evenodd" d="M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11S18.075 1 12 1zM2.5 12a9.5 9.5 0 1119 0 9.5 9.5 0 01-19 0z"/>' +
                           '</svg>' +
                       '</div>' +
                       '<div class="forecast-insight-content">' +
                           '<div class="forecast-insight-title">Insight</div>' +
                           '<div class="forecast-insight-text">' + (data.insights || 'Team capacity analysis.') + '</div>' +
                       '</div>' +
                   '</div>';
           }
           
           container.style.opacity = '0';
           container.innerHTML = resultsHtml;
           
           var self = this;
           setTimeout(function() {
               container.style.transition = 'opacity 0.5s ease-in';
               container.style.opacity = '1';
               
               if (type === 'velocity' && data.chart) {
                   self.drawVelocityForecastEnhanced(data);
               } else if (type === 'burndown' && data.chart) {
                   self.drawBurndownForecastEnhanced(data);
               } else if (type === 'capacity' && data.chart) {
                   self.drawCapacityForecastEnhanced(data);
               }
           }, 100);
       },
       
       drawVelocityForecastEnhanced: function(data) {
           var canvas = document.getElementById('velocityForecastChart');
           if (!canvas || !data.chart || !data.chart.data) return;
           
           var ctx = canvas.getContext('2d');
           
           if (window.velocityForecastChartInstance) {
               window.velocityForecastChartInstance.destroy();
           }
           
           window.velocityForecastChartInstance = new Chart(ctx, {
               type: data.chart.type || 'line',
               data: data.chart.data,
               options: {
                   responsive: true,
                   maintainAspectRatio: false,
                   plugins: {
                       legend: {
                           display: false
                       },
                       tooltip: {
                           callbacks: {
                               label: function(context) {
                                   return context.dataset.label + ': ' + context.parsed.y + ' points';
                               }
                           }
                       }
                   },
                   scales: {
                       y: {
                           beginAtZero: true,
                           grid: {
                               color: 'rgba(0, 0, 0, 0.05)'
                           },
                           ticks: {
                               callback: function(value) {
                                   return value + ' pts';
                               }
                           }
                       },
                       x: {
                           grid: {
                               display: false
                           }
                       }
                   }
               }
           });
       },
       
       animateValue: function(element, endValue, decimalPlaces, suffix) {
           if (!element) return;
           
           decimalPlaces = decimalPlaces || 0;
           suffix = suffix || '';
           
           var startValue = parseFloat(element.textContent) || 0;
           var duration = 1500;
           var startTime = performance.now();
           
           var numericEnd = parseFloat(endValue);
           
           function update(currentTime) {
               var elapsed = currentTime - startTime;
               var progress = Math.min(elapsed / duration, 1);
               
               var easeOut = 1 - Math.pow(1 - progress, 4);
               var current = startValue + (numericEnd - startValue) * easeOut;
               
               if (decimalPlaces > 0) {
                   element.textContent = current.toFixed(decimalPlaces) + suffix;
               } else {
                   element.textContent = Math.floor(current) + suffix;
               }
               
               if (progress < 1) {
                   requestAnimationFrame(update);
               }
           }
           
           requestAnimationFrame(update);
       },
       
       showLoadingState: function() {
           document.querySelectorAll('.stat-value').forEach(function(el) {
               el.textContent = '--';
               el.style.opacity = '0.5';
           });
           
           document.querySelectorAll('.chart-container').forEach(function(el) {
               el.style.opacity = '0.5';
           });
       },
       
       hideLoadingState: function() {
           document.querySelectorAll('.stat-value').forEach(function(el) {
               el.style.opacity = '1';
           });
           
           document.querySelectorAll('.chart-container').forEach(function(el) {
               el.style.opacity = '1';
           });
       },
       
       showError: function(message) {
           if (typeof AJS !== 'undefined' && AJS.flag) {
               AJS.flag({
                   type: 'error',
                   title: 'Error',
                   body: message,
                   close: 'manual'
               });
           } else {
               console.error(message);
               alert(message);
           }
       },
       
       updateLastUpdatedTime: function(timestamp) {
           var time = timestamp ? new Date(timestamp).toLocaleTimeString() : new Date().toLocaleTimeString();
           console.log('Dashboard last updated:', time);
       },
       
       bindEvents: function() {
           console.log('Events bound for new dashboard layout');
       },
       
       initializeTooltips: function() {
           var tooltip = document.getElementById('tooltip');
           if (!tooltip) return;
           
           document.addEventListener('mouseover', function(e) {
               if (e.target.classList.contains('bar-segment')) {
                   var rect = e.target.getBoundingClientRect();
                   var percentage = e.target.style.height;
                   var type = e.target.classList.contains('completed') ? 'Completed' :
                              e.target.classList.contains('in-progress') ? 'In Progress' : 'To Do';
                   
                   tooltip.innerHTML = type + ': ' + percentage;
                   tooltip.style.left = rect.left + rect.width / 2 + 'px';
                   tooltip.style.top = rect.top - 30 + 'px';
                   tooltip.classList.add('show');
               }
           });
           
           document.addEventListener('mouseout', function(e) {
               if (e.target.classList.contains('bar-segment')) {
                   tooltip.classList.remove('show');
               }
           });
       },
       
       initializeInteractions: function() {
           var self = this;
           
           document.querySelectorAll('.sidebar-icon').forEach(function(icon) {
               icon.addEventListener('click', function() {
                   document.querySelectorAll('.sidebar-icon').forEach(function(i) {
                       i.classList.remove('active');
                   });
                   this.classList.add('active');
               });
           });
           
           document.addEventListener('keydown', function(e) {
               if (e.key === 'Escape') {
                   var modal = document.getElementById('alertModal');
                   var overlay = document.getElementById('modalOverlay');
                   if (modal && modal.classList.contains('active')) {
                       modal.classList.remove('active');
                       overlay.classList.remove('active');
                   }
               }
           });
       },
       
       startPolling: function() {
           if (this.isPolling) return;
           
           this.isPolling = true;
           console.log('Starting smart polling for real-time updates');
           
           var self = this;
           this.checkForUpdates();
           
           this.pollInterval = setInterval(function() {
               self.checkForUpdates();
           }, this.pollFrequency);
       },
       
       stopPolling: function() {
           if (this.pollInterval) {
               clearInterval(this.pollInterval);
               this.pollInterval = null;
           }
           this.isPolling = false;
       },
       
       checkForUpdates: function() {
           var self = this;
           if (!this.currentProjectKey) return;
           
           console.log('🔍 Checking for updates at ' + new Date().toLocaleTimeString() + '...');
           
           var baseUrl = window.location.origin;
           var updatesUrl = baseUrl + '/rest/jurix/1.0/updates/' + this.currentProjectKey + '?since=' + this.lastUpdateTimestamp;
           
           fetch(updatesUrl, {
               method: 'GET',
               headers: {
                   'Content-Type': 'application/json',
               }
           })
           .then(function(response) {
               return response.json();
           })
           .then(function(data) {
               if (data.hasUpdates) {
                   console.log('✅ Found ' + data.updateCount + ' updates!');
                   
                   self.lastUpdateTimestamp = data.timestamp || Date.now();
                   
                   if (data.updates && data.updates.length > 0) {
                       self.showUpdateNotification(data.updates[0]);
                   }
                   
                   if (data.needsRefresh) {
                       self.loadDashboardData();
                   }
                   
                   self.adjustPollFrequency(true);
               } else {
                   self.adjustPollFrequency(false);
               }
           })
           .catch(function(error) {
               console.error('❌ Error checking updates:', error);
               self.adjustPollFrequency(false);
           });
       },
       
       adjustPollFrequency: function(hasActivity) {
           this.stopPolling();
           
           if (hasActivity) {
               this.pollFrequency = Math.max(this.MIN_POLL_FREQUENCY, this.pollFrequency * 0.8);
           } else {
               this.pollFrequency = Math.min(this.MAX_POLL_FREQUENCY, this.pollFrequency * 1.5);
           }
           
           console.log('Adjusted poll frequency to ' + this.pollFrequency + 'ms');
           
           var self = this;
           this.pollInterval = setInterval(function() {
               self.checkForUpdates();
           }, this.pollFrequency);
       },
       
       showUpdateNotification: function(update) {
           if (typeof AJS !== 'undefined' && AJS.flag) {
               AJS.flag({
                   type: 'success',
                   title: 'Dashboard Updated',
                   body: (update.issueKey || 'System') + ' - ' + (update.eventType || 'Updated'),
                   close: 'auto'
               });
           }
       },
       
       viewDetails: function(type) {
           console.log('Viewing details for:', type);
           window.location.href = window.location.origin + '/browse/' + this.currentProjectKey + '?view=' + type;
       },
       
       toggleAlertModal: function() {
           var modal = document.getElementById('alertModal');
           var overlay = document.getElementById('modalOverlay');
           if (modal && overlay) {
               modal.classList.toggle('active');
               overlay.classList.toggle('active');
           }
       },
       
       switchForecast: function(position, element) {
           console.log('Switching forecast to position:', position);
           
           document.querySelectorAll('.forecast-pill').forEach(function(opt) {
               opt.classList.remove('active');
           });
           element.classList.add('active');
           
           var indicator = document.querySelector('.forecast-indicator');
           if (indicator) {
               indicator.className = 'forecast-indicator';
               indicator.classList.add('pos-' + position);
           }
           
           var types = ['velocity', 'burndown', 'capacity'];
           window.currentForecastType = types[position - 1];
           
           console.log('Updated forecast type to:', window.currentForecastType);
           
           var forecastCard = document.querySelector('.performance-card');
           if (forecastCard) {
               var resultsContainer = forecastCard.querySelector('.forecast-results');
               if (resultsContainer) {
                   resultsContainer.remove();
               }
           }
       },
       
       runSprintAnalysis: function() {
           var self = this;
           console.log('Running AI sprint analysis...');
           if (typeof AJS !== 'undefined' && AJS.flag) {
               AJS.flag({
                   type: 'info',
                   title: 'AI Analysis Started',
                   body: 'Running comprehensive sprint analysis. This may take a few moments...',
                   close: 'auto'
               });
           }
           
           setTimeout(function() {
               self.loadDashboardData();
           }, 2000);
       },

       updateSprintHealth: function(healthData) {
            console.log('Updating sprint health:', healthData);
            
            var scoreEl = document.getElementById('sprintHealthScore');
            var statusEl = document.getElementById('sprintHealthStatus');
            var detailsEl = document.getElementById('sprintHealthDetails');
            
            if (!scoreEl || !statusEl) {
                console.error('Sprint health elements not found');
                return;
            }
            
            // Get the score - handle different property names
            var score = healthData.score || healthData.health_score || healthData.healthScore || 79;
            console.log('Sprint health score:', score);
            
            // Update the score display
            scoreEl.textContent = score + '%';
            
            // Determine status based on score
            var status = '';
            if (score >= 80) {
                scoreEl.style.color = '#36B37E';
                statusEl.style.color = '#36B37E';
                status = 'Healthy';
            } else if (score >= 60) {
                scoreEl.style.color = '#FFAB00';
                statusEl.style.color = '#FFAB00';
                status = 'At Risk';
            } else {
                scoreEl.style.color = '#FF5630';
                statusEl.style.color = '#FF5630';
                status = 'Critical';
            }
            
            statusEl.textContent = healthData.status || status;
            
            // Update details if available
            if (detailsEl && healthData.factors && healthData.factors.length > 0) {
                var detailsHtml = healthData.factors.map(function(factor) {
                    return '• ' + factor;
                }).join('<br>');
                detailsEl.innerHTML = detailsHtml;
            }
        },

        updateTeamPerformance: function(teamData) {
            console.log('Updating team performance:', teamData);
            
            var tbody = document.getElementById('teamPerformanceBody');
            if (!tbody) {
                console.error('Team performance table body not found');
                return;
            }
            
            tbody.innerHTML = '';
            
            var members = teamData.members || [];
            
            if (members.length === 0) {
                var row = document.createElement('tr');
                row.innerHTML = '<td colspan="5" style="text-align: center; padding: 20px; color: #6B778C;">No team performance data available</td>';
                tbody.appendChild(row);
                return;
            }
            
            members.forEach(function(member) {
                var row = document.createElement('tr');
                row.style.borderBottom = '1px solid #f0f2f5';
                
                // For efficiency, if it's a decimal (like 0.666), convert to percentage
                var efficiency = member.efficiency;
                if (efficiency < 1 && efficiency > 0) {
                    efficiency = Math.round(efficiency * 100);
                } else if (efficiency > 1) {
                    efficiency = Math.round(efficiency);
                }
                
                row.innerHTML = 
                    '<td style="padding: 16px; font-weight: 500;">' + (member.name || 'Unknown') + '</td>' +
                    '<td style="padding: 16px; text-align: center;">' + (member.completed || 0) + '</td>' +
                    '<td style="padding: 16px; text-align: center;">' + (member.cycleTime || 0).toFixed(1) + 'd</td>' +
                    '<td style="padding: 16px; text-align: center;">' + efficiency + '%</td>' +
                    '<td style="padding: 16px; text-align: right;">' +
                        '<div style="display: inline-flex; align-items: center; gap: 8px;">' +
                            '<span style="font-weight: 600; color: #36B37E;">' + (member.rating || efficiency || 0) + '%</span>' +
                            '<div style="width: 60px; height: 6px; background: #e4e6ea; border-radius: 3px; overflow: hidden;">' +
                                '<div style="width: ' + (member.rating || efficiency || 0) + '%; height: 100%; background: #36B37E;"></div>' +
                            '</div>' +
                        '</div>' +
                    '</td>';
                
                tbody.appendChild(row);
            });
        },
       
       generateReport: function() {
           console.log('Generating report...');
           window.open(window.location.origin + '/rest/jurix/1.0/report/' + this.currentProjectKey, '_blank');
       },
       
       applyRecommendation: function(index) {
           var self = this;
           console.log('Applying recommendation', index);
           
           if (typeof AJS !== 'undefined' && AJS.flag) {
               AJS.flag({
                   type: 'success',
                   title: 'Recommendation Applied',
                   body: 'The AI recommendation has been applied successfully!',
                   close: 'auto'
               });
           }
           
           setTimeout(function() {
               self.loadDashboardData();
           }, 1000);
       },
       
       updateAISummary: function(summary) {
           console.log('AI Summary:', summary);
       },
       
       updateTicketPredictions: function(predictions) {
           console.log('Ticket Predictions:', predictions);
       },
       
       updateSprintHealthPulse: function(healthData) {
           console.log('Sprint Health:', healthData);
       },
       
       updateTeamEnergyMeter: function(energyData) {
           console.log('Team Energy:', energyData);
       },
       
       updateTeamAnalytics: function(analytics) {
           console.log('Team Analytics:', analytics);
       },
       
       showCriticalFactors: function(factors) {
           console.log('Critical Factors:', factors);
       },
       
       drawBurndownForecastEnhanced: function(data) {
           var canvas = document.getElementById('burndownForecastChart');
           if (!canvas || !data.chart || !data.chart.data) return;
           
           var ctx = canvas.getContext('2d');
           
           if (window.burndownForecastChartInstance) {
               window.burndownForecastChartInstance.destroy();
           }
           
           window.burndownForecastChartInstance = new Chart(ctx, {
               type: data.chart.type || 'line',
               data: data.chart.data,
               options: {
                   responsive: true,
                   maintainAspectRatio: false,
                   plugins: {
                       legend: {
                           display: true,
                           position: 'bottom'
                       }
                   },
                   scales: {
                       y: {
                           beginAtZero: true,
                           title: {
                               display: true,
                               text: 'Story Points'
                           }
                       },
                       x: {
                           grid: {
                               display: false
                           }
                       }
                   }
               }
           });
       },
       
       drawCapacityForecastEnhanced: function(data) {
           var canvas = document.getElementById('capacityForecastChart');
           if (!canvas || !data.chart || !data.chart.data) return;
           
           var ctx = canvas.getContext('2d');
           
           if (window.capacityForecastChartInstance) {
               window.capacityForecastChartInstance.destroy();
           }
           
           window.capacityForecastChartInstance = new Chart(ctx, {
               type: data.chart.type || 'bar',
               data: data.chart.data,
               options: {
                   responsive: true,
                   maintainAspectRatio: false,
                   plugins: {
                       legend: {
                           display: false
                       }
                   },
                   scales: {
                       y: {
                           beginAtZero: true,
                           max: 100,
                           ticks: {
                               callback: function(value) {
                                   return value + '%';
                               }
                           }
                       }
                   }
               }
           });
       }
   };
   
   // Initialize when DOM is ready
   if (document.readyState === 'loading') {
       document.addEventListener('DOMContentLoaded', function() {
           window.JurixDashboard.init();
       });
   } else {
       window.JurixDashboard.init();
   }
   /* ]]> */
   </script>
</body>
</html>